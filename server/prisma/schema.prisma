generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  uid           Int           @id @default(autoincrement())
  name          String
  phone         String?
  email         String        @unique
  password      String
  address       String?
  role          String        @default("User") // User, Admin, Owner
  wallets       Wallet[]
  transactions  Transaction[]
  topups        Topup[]
  approved      Topup[]       @relation("TopupApprovedBy")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Wallet {
  wallet_id     Int           @id @default(autoincrement())
  name          String
  number        String        @unique
  balance       Float         @default(0)
  desc          String?
  exp_date      DateTime?
  uid           Int
  user          User          @relation(fields: [uid], references: [uid], onDelete: Cascade)
  transactions  Transaction[] 
  topups        Topup[]       
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Transaction {
  trans_id      Int           @id @default(autoincrement())
  uid           Int?
  user          User?         @relation(fields: [uid], references: [uid])
  wallet_id     Int?
  wallet        Wallet?        @relation(fields: [wallet_id], references: [wallet_id], onDelete: SetNull)
  amount        Float         
  type_id       Int
  type          Type          @relation(fields: [type_id], references: [type_id])
  description   String        
  date          DateTime 
  detail        String?           
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Type {
  type_id       Int           @id @default(autoincrement())
  name          String        @unique
  transactions  Transaction[]
}

model Topup {
  topup_id       Int       @id @default(autoincrement())        // Primary key
  wallet_id      Int?                                            // FK ke Wallet
  wallet         Wallet?    @relation(fields: [wallet_id], references: [wallet_id], onDelete: SetNull)
  user_id        Int                                            // FK ke User (si pengaju)
  user           User      @relation(fields: [user_id], references: [uid])
  amount         Float
  payment_method String
  reference_id   String
  status         String    @default("Pending")   // Pending | Completed | Rejected
  requested_at   DateTime  @default(now())
  approved       User?     @relation("TopupApprovedBy",fields: [approved_by], references: [uid])
  approved_by    Int?                             // Admin UID
  approved_at    DateTime?
  admin_notes    String?
}
